AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TeamName:
    Type: String
    Default: DAMO
  ProjectName:
    Type: String
    Default: API
  ENV:
    Description: Specify for differnt environments in the same account
    Type: String
    Default: dev   
  MemoryReservation:
    Description: Docker container reserved memory. Here is the lower limit.
    Type: String
    Default: 1000
  DesiredCount:
    Description: docker container count
    Type: String
    Default: 1
  CONSOLELOG:
    Description: Specify for differnt environments in the same account
    Type: String
    Default: true
  CMD:
    Description: Docker image id of Project from ECR
    Type: String
    Default: while true;do echo 'sleeping ...';sleep 3;done;
  DockerImageId:
    Description: Docker image id of Project from ECR
    Type: String
    Default: 476985428237.dkr.ecr.ap-southeast-1.amazonaws.com/history_web_api:20200401.20
Mappings:
  ClusterNameMap:
    dev:
      value: DAMO-Cluster
    qa:
      value: DAMO-Cluster
    cert:
      value: DAMO-Cluster-cert
    prod:
      value: DAMO-Cluster-prod
  SecurityGroupMap:
    dev:
      value: sg-03d294231c1b99316
    qa:
      value: sg-03d294231c1b99316
    cert:
      value: sg-073570b817287fac4
    prod:
      value: sg-073570b817287fac4
  SubnetMap:
    dev:
      value: subnet-03dafe4a903bf77f3,subnet-09d9e4fc315254db0
    qa:
      value: subnet-03dafe4a903bf77f3,subnet-09d9e4fc315254db0
    cert:
      value: subnet-0b0a66b5da5157ed9,subnet-056a9da3e0fb617bc
    prod:
      value: subnet-0b0a66b5da5157ed9,subnet-056a9da3e0fb617bc
  SNSMapping:
    dev:
        value: "arn:aws:sns:ap-southeast-1:476985428237:damo_alarm_dev"
    qa:
        value: "arn:aws:sns:ap-southeast-1:476985428237:damo_alarm_dev"
    cert:
        value: "arn:aws:sns:us-east-1:206710830665:damo-api-error-prod"
    prod:
        value: "arn:aws:sns:us-east-1:206710830665:damo-api-error-prod"
Resources:  
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [DAMO, !Ref 'AWS::StackName']]
      RetentionInDays: 365
  ErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
        AlarmActions: 
            - !FindInMap [SNSMapping,!Ref ENV,value]
        AlarmDescription: !Sub ${TeamName}-${ProjectName}-ERROR-${ENV}
        AlarmName: !Sub ${TeamName}-${ProjectName}-ERROR-${ENV}
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 1
        EvaluationPeriods: 1 
        TreatMissingData: missing     
        Metrics:   
          -   Id: m1
              ReturnData: true
              Label: "Error"
              MetricStat:
                Metric:
                    MetricName: !Sub ${TeamName}-${ProjectName}-ERROR-${ENV}
                    Namespace: ERROR
                Period: 3600
                Stat: Sum      
  ErrorMetricFilter: 
      Type: AWS::Logs::MetricFilter
      Properties: 
          LogGroupName: !Ref CloudwatchLogsGroup
          FilterPattern: "[ERROR,error,Error]"
          MetricTransformations: 
              - MetricValue: "1"
                MetricNamespace: "ERROR"
                MetricName: !Sub ${TeamName}-${ProjectName}-ERROR-${ENV}

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [DAMO,!Ref 'AWS::StackName']]
      ExecutionRoleArn: !Ref TaskRole
      TaskRoleArn: !Ref TaskRole     
      ContainerDefinitions:
      - Name: !Join ['-', [DAMO,!Ref 'AWS::StackName']]
        Command: !Split
        - ","
        - !Ref 'CMD'
        Essential: 'true'
        Image: !Ref DockerImageId
        MemoryReservation: !Ref 'MemoryReservation'
        PortMappings:
          - ContainerPort: 5000
            HostPort: 0
            Protocol: "tcp"   
        Environment:
          - Name: 'ENV'
            Value: !Ref 'ENV'
          - Name: 'CONSOLE_LOG'
            Value: !Ref 'CONSOLELOG'
        Secrets:
        - Name: DATALAKE_KEY
          ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DAMO/api/${ENV}/DATALAKE_KEY'
        - Name: MYSQL_PWD
          ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DAMO/api/${ENV}/MYSQL_PWD'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: 'worker'   
  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !FindInMap
      - ClusterNameMap
      - !Ref ENV
      - value     
      DesiredCount: !Ref 'DesiredCount'  
      TaskDefinition: !Ref 'taskdefinition'
      PlacementStrategies:
        - 
          Type: spread
          Field: "instanceId"
        - 
          Type: binpack
          Field: "cpu"
        - 
          Type: binpack
          Field: "memory"
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: 'AssetID'
          Value: '2703'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: !Join ['-', [DAMO,!Ref 'AWS::StackName']]
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: 
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/DAMO/api/${ENV}/*'
          - Effect: Allow
            Action:
            - "ecr:GetAuthorizationToken"
            - "ecr:BatchCheckLayerAvailability"
            - "ecr:BatchGetImage"
            - "ecr:GetDownloadUrlForLayer"
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            Resource: "*"
          - Effect: Allow
            Action:
            - "sqs:ListQueues"
            - "sqs:GetQueueUrl"
            - "sqs:SendMessageBatch"
            - "sqs:PurgeQueue"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:SendMessage"
            - "sqs:GetQueueAttributes"
            - "s3:*Object"
            - "s3:ListBucket"
            Resource: "*"  
          - Effect: Allow
            Action:
            - "ses:SendEmail"
            - "ses:SendRawEmail"
            Resource: "*" 