---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  CloudFormation template for DAMO API Application Layer

Parameters:
  Env:
    Type: String
    Default: dev
  ApplicationLoadBalancerName:
    Type: String
    Default: damo-restapi-ec2-alb-dev
  TargetGroupsName:
    Type: String
    Default: damo-api-tgs-dev
  SecurityGroupIDs:
    Type: CommaDelimitedList
    Default: "sg-0a0cab2883f265885,sg-03d294231c1b99316"
  PublicSubnetIDs:
    Type: CommaDelimitedList
    Default: "subnet-02253d49e24e29c8d,subnet-04a965633669aa853"
  PrivateSubnetIDs:
    Type: CommaDelimitedList
    Default: "subnet-03dafe4a903bf77f3,subnet-09d9e4fc315254db0"
  EC2AMIID:
    Type: String

Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      Name: !Ref ApplicationLoadBalancerName
      SecurityGroups: !Ref SecurityGroupIDs
      Subnets: !Ref PrivateSubnetIDs

  ListenerwithPort80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRuleHeadnote:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup1
      Conditions:
        - Field: path-pattern
          Values: 
          - /api/headnote/*
      ListenerArn: !Ref ListenerwithPort80
      Priority: 1

  ListenerRuleOutcome:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: path-pattern
          Values: 
          - /api/outcome/*
      ListenerArn: !Ref ListenerwithPort80
      Priority: 2

  ListenerRuleOverView:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: path-pattern
          Values: 
          - /api/overview/*
      ListenerArn: !Ref ListenerwithPort80
      Priority: 3
  
  ListenerRuleETL:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup2
      Conditions:
        - Field: path-pattern
          Values: 
          - /api/etl/*
      ListenerArn: !Ref ListenerwithPort80
      Priority: 4


  TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-07ae063405f3dad33
      Name: !Join
      - "-"
      - - !Ref TargetGroupsName
        - "hn"
      TargetType: instance
      Port: 5000
      Protocol: HTTP

  AutoscalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroup1
      LaunchConfigurationName: !Ref LaunchConfiguration1
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier: !Ref PrivateSubnetIDs
      Tags:
        - Key: Name
          Value: damo-rest-api-dev-hn
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 2

  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-07ae063405f3dad33
      Name: !Join
      - "-"
      - - !Ref TargetGroupsName
        - "oc"
      TargetType: instance
      Port: 5000
      Protocol: HTTP

  AutoscalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      TargetGroupARNs:
        - !Ref TargetGroup2
      LaunchConfigurationName: !Ref LaunchConfiguration1
      DesiredCapacity: 1
      MaxSize: 2
      MinSize: 1
      VPCZoneIdentifier: !Ref PrivateSubnetIDs
      Tags:
        - Key: Name
          Value: damo-rest-api-dev-oc
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 2

  LaunchConfiguration1:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "cpu": {
                        "resources": [
                          "*"
                        ],
                        "measurement": [
                          {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                          {"name": "cpu_usage_nice", "unit": "Percent"}
                        ],
                        "metrics_collection_interval": 10
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "disk": {
                        "measurement": [
                          "free",
                          "used_percent"
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service

    Properties:
      KeyName: damo_api
      ImageId: !Ref EC2AMIID
      SecurityGroups: !Ref SecurityGroupIDs
      InstanceType: m5.large
      IamInstanceProfile: !Ref InstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
              VolumeSize: 100
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /usr/local/damo_rest_api

          env=dev
          PROJECT='DAMO'
          SERVER_ROLE="restapi"
          SSM_PARAMETERS_PATH="/$PROJECT/$env/$SERVER_ROLE/"

          # Query the region in which EC2 runs.
          AWS_REGION=`curl http://169.254.169.254/latest/dynamic/instance-identity/document | grep "region" | awk -F\" '{print $4}'`

          # Fetch parameters from System Manager Parameter Store
          SSM_PARAMETERS=`aws ssm get-parameters-by-path --path "$SSM_PARAMETERS_PATH" --region $AWS_REGION --output json --with-decryption 2>&1`

          ssm_get_parameter () {
                  echo $SSM_PARAMETERS | jq ".Parameters[] | select(.Name == \"$SSM_PARAMETERS_PATH$1\").Value" | sed -e 's/^"//' -e 's/"$//'
          }

          export DB_HOST=`ssm_get_parameter "DB_HOST"`
          export DB_NAME=`ssm_get_parameter "DB_NAME"`
          export DB_PASSWORD=`ssm_get_parameter "DB_PASSWORD"`
          export DB_USER_NAME=`ssm_get_parameter "DB_USER_NAME"`
          export SQLALCHEMY_TRACK_MODIFICATIONS=`ssm_get_parameter "SQLALCHEMY_TRACK_MODIFICATIONS"`

          mkdir -p /usr/local/damo_rest_api/data
          aws s3 sync s3://damo-ai-data/damo-api /usr/local/damo_rest_api/data


          # awslogs agent
          # - hack logs stream group name
          # - hack aws cli region
          # sed -i -e '/region =/ s/= ap-southeast-1/= $AWS_REGION/' /etc/awslogs/awscli.conf
          # sed -i -e '/log_group_name =/ s/= ap-southeast-1/= $AWS_REGION/2' /etc/awslogs/awslogs.conf

          systemctl start awslogsd
          systemctl enable awslogsd.service || true

          systemctl start amazon-ssm-agent
          systemctl enable amazon-ssm-agent || true

          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfiguration1 --region ${AWS::Region} --configsets default || true
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource LaunchConfiguration1 --region ${AWS::Region} || true

          touch health_info.json
          /usr/local/bin/uwsgi wsgi.ini

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Tags:
        - Key: AssetID
          Value: 2703
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
      Policies:
        - PolicyName: damo_rest_api_ssm_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameterHistory'
                  - 'ssm:GetParametersByPath'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParameter'
                Resource: 'arn:aws:ssm:ap-southeast-1:476985428237:parameter/DAMO/dev/restapi/*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeTags'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: 'arn:aws:s3:::damo-ai-data'
                Condition:
                  StringLike:
                    "s3:prefix": "damo-api/*"
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 'arn:aws:s3:::damo-ai-data/damo-api/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: 'arn:aws:s3:::damo-raw-xml'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: 'arn:aws:s3:::damo-raw-xml/*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - "*"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
